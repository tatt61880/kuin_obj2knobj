{
	Obj.kn v1.01 (for Kuin 1.01):
		Last Modified: 2014/02/09 23:56:44.
		Created by Tatt(@tatt61880)
		https://twitter.com/tatt61880
		https://github.com/tatt61880

	objファイルを扱うライブラリです。
}

func Load(path: []char): @CObj
	return (#@CObj).Load(path)
end func

class CObj()
	var v: []cVector
	var uv: []cVector2D
	var vn: []cVector
	var f: []cFacet
	func Load(path: []char): @CObj
		var stream: File@CLoadStream :: File@LoadFileStream(path)
		if(stream =& null)
			return null
		end if
		do me.v :: [(#cVector).Init(0.0, 0.0, 0.0)]
		do me.uv :: [(#cVector2D).Init(0.0, 0.0)]
		do me.vn :: [(#cVector).Init(0.0, 0.0, 0.0)]
		do me.f :: #[0]cFacet
		const n: int :: 3 {三角形限定}
		var posIdSet: []cPosIdSet :: #[n]cPosIdSet
		foreach p(posIdSet)
			do p :: #cPosIdSet
		end foreach
		var str: []char
		var p1: int :: 0
		var p2: int :: 0

		do stream.SetSplitChars(" \n")
		try
			while a()
				do str :: stream.ReadStr()
				if(str =& null)
					break a
				end if
				switch(str)
				case("v")
					do me.v :~ [(#cVector).Init(stream.ReadFloat(), stream.ReadFloat(), stream.ReadFloat())]
				case("uv")
					do me.uv :~ [(#cVector2D).Init(stream.ReadFloat(), stream.ReadFloat())]
				case("vn")
					do me.vn :~ [(#cVector).Init(stream.ReadFloat(), stream.ReadFloat(), stream.ReadFloat())]
				case("f")
					for i(0, n - 1)
						do str :: stream.ReadStr()
						if(countSlash(str) <> 2)
							do Dbg@Log("Error: f format error. It must be \"f v/uv/vn v/uv/vn v/uv/vn\". (f-id " ~ me.f.Len().ToStr() ~ ")")
							continue a
						end if
						func countSlash(str: []char): int
							var ret: int
							foreach c(str)
								if(c = '/')
									do ret :+ 1
								end if
							end foreach
							return ret
						end func
						for j(0, str.Len() - 1)
							if(str[j] = '/')
								if(p1 = 0)
									do p1 :: j
									continue j
								else
									do p2 :: j
									break j
								end if
							end if
						end for
						var s1: []char :: str.Sub(0, p1)
						var s2: []char :: (p2 - p1 <> 1) ?(str.Sub(p1 + 1, p2 - p1 - 1), "0")
						var s3: []char :: (str.Len() - p2 <> 1) ?(str.Sub(p2 + 1, str.Len() - p2 - 1), "0")
						do p1 :: 0
						do posIdSet[i].vId :: s1 $ int
						do posIdSet[i].uvId :: s2 $ int
						do posIdSet[i].vnId :: s3 $ int
					end for
					do me.f :~ [(#cFacet).Init(posIdSet)]
				end switch
			end while
		catch()
			do Dbg@Log("Error: Unexpected error. Please tell me (@tatt61880) the info.")
		end try

		return me
	end func

	class cVector()
		var x: float
		var y: float
		var z: float
		func Init(x: float, y: float, z: float): cVector
			do me.x :: x
			do me.y :: y
			do me.z :: z
			return me
		end func
	end class
	class cVector2D()
		var x: float
		var y: float
		func Init(x: float, y: float): cVector2D
			do me.x :: x
			do me.y :: y
			return me
		end func
	end class

	class cPosIdSet()
		var vId: int
		var uvId: int
		var vnId: int
		func Init(vId: int, uvId: int, vnId: int): cPosIdSet
			do me.vId :: vId
			do me.uvId :: uvId
			do me.vnId :: vnId
			return me
		end func
	end class

	class cFacet()
		var positions: []cPosIdSet
		func Init(ps: []cPosIdSet): cFacet
			do me.positions :: ##ps
			return me
		end func
	end class

	func ToKnobj(path: []char)
		var bin: []byte8 :: #[0]byte8
		do bin :~ 0 .ToBins()
		do bin :~ 1 .ToBins()
		do bin :~ me.f.Len().ToBins()
		var fId: int :: 1
		foreach f(me.f)
			for i(2, 0, -1)
				if(f.positions[i].vId < me.v.Len())
					do bin :~ (me.v[f.positions[i].vId].x).ToBins()
					do bin :~ (me.v[f.positions[i].vId].y).ToBins()
					do bin :~ (me.v[f.positions[i].vId].z).ToBins()
				else
					do Dbg@Log("Error: Invalid  v-id " ~ f.positions[i].vId.ToStr()  ~ " (f-id " ~ fId.ToStr() ~")")
				end if
				if(f.positions[i].uvId < me.uv.Len())
					do bin :~ (me.uv[f.positions[i].uvId].x).ToBins()
					do bin :~ (me.uv[f.positions[i].uvId].y).ToBins()
				else
					do Dbg@Log("Error: Invalid uv-id " ~ f.positions[i].uvId.ToStr() ~ " (f-id " ~ fId.ToStr() ~")")
				end if
				if(f.positions[i].vnId < me.vn.Len())
					do bin :~ (me.vn[f.positions[i].vnId].x).ToBins()
					do bin :~ (me.vn[f.positions[i].vnId].y).ToBins()
					do bin :~ (me.vn[f.positions[i].vnId].z).ToBins()
				else
					do Dbg@Log("Error: Invalid vn-id " ~ f.positions[i].vnId.ToStr() ~ " (f-id " ~ fId.ToStr() ~")")
				end if
			end for
			do fId :+ 1
		end foreach
		do File@WriteFile(path, bin)
	end func
end class

